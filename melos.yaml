name: video_window
description: Craft Video Marketplace - Flutter multi-package workspace
repository: https://github.com/your-org/video_window
sdk: '>=3.8.0 <4.0.0'
environment:
  sdk: '>=3.8.0 <4.0.0'
  flutter: '>=3.35.0'

# Package discovery patterns
packages:
  - packages/mobile_client
  - packages/core
  - packages/shared_models
  - packages/design_system
  - packages/features/*
  - serverpod

# Command scripts
scripts:
  # Development commands
  setup:
    description: Set up the development environment
    run: |
      melos exec --flutter pub get
      melos exec --dart run build_runner build
      echo "‚úÖ Development environment setup complete"

  clean:
    description: Clean all packages
    run: |
      melos exec --flutter clean
      melos exec --rm -rf .dart_tool
      melos exec --rm -rf build
      echo "‚úÖ All packages cleaned"

  # Analysis and formatting
  analyze:
    description: Analyze all packages for issues
    run: melos exec --flutter analyze --fatal-infos --fatal-warnings
    packageFilters:
      dirExists: lib

  format:
    description: Format all Dart code
    run: melos exec --dart format . --set-exit-if-changed
    packageFilters:
      dirExists: lib

  format-check:
    description: Check if code is properly formatted
    run: melos exec --dart format . --set-exit-if-changed
    packageFilters:
      dirExists: lib

  # Testing commands
  test:
    description: Run all tests with comprehensive reporting
    run: |
      melos run test:unit
      melos run test:coverage:merge
      melos run test:coverage:report
    packageFilters:
      dirExists: test

  test:unit:
    description: Run unit tests only
    run: melos exec --flutter test test/unit --reporter=expanded --coverage
    packageFilters:
      dirExists: test

  test:widget:
    description: Run widget tests
    run: melos exec --flutter test test/widget --reporter=expanded
    packageFilters:
      dirExists: test/widget

  test:integration:
    description: Run integration tests
    run: melos exec --flutter test test/integration --reporter=expanded
    packageFilters:
      dirExists: test/integration

  test:golden:
    description: Run golden tests
    run: melos exec --flutter test test/golden --reporter=expanded --update-goldens
    packageFilters:
      dirExists: test/golden

  test:watch:
    description: Run tests in watch mode
    run: melos exec --flutter test --watch --reporter=expanded
    packageFilters:
      dirExists: test

  test:all:
    description: Run all test types (unit, widget, integration)
    run: |
      melos run test:unit
      melos run test:widget
      melos run test:integration
    packageFilters:
      dirExists: test

  test:performance:
    description: Run performance tests
    run: melos exec --flutter test test/performance --reporter=expanded
    packageFilters:
      dirExists: test/performance

  test:coverage:
    description: Run tests with coverage report
    run: |
      melos run test:unit
      melos run coverage:merge
      melos run coverage:report

  test:coverage:merge:
    description: Merge coverage files
    run: |
      mkdir -p coverage
      find packages -name "lcov.info" -exec cat {} \; > coverage/lcov.info
      echo "üìä Coverage files merged"

  test:coverage:report:
    description: Generate coverage report
    run: |
      if command -v genhtml &> /dev/null; then
        genhtml coverage/lcov.info -o coverage/html
        echo "üìä Coverage report generated at coverage/html/index.html"
      else
        echo "‚ö†Ô∏è genhtml not found. Install lcov for HTML reports."
        # Generate simple text report
        if [ -f "coverage/lcov.info" ]; then
          echo "üìä Coverage Summary:"
          lcov --summary coverage/lcov.info 2>/dev/null || echo "Coverage data available but lcov summary not available"
        fi
      fi

  test:coverage:check:
    description: Check if coverage meets minimum thresholds
    run: |
      if command -v lcov &> /dev/null && [ -f "coverage/lcov.info" ]; then
        COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep -E 'lines......:' | awk '{print $2}' | sed 's/%//')
        if [ -n "$COVERAGE" ] && [ "$COVERAGE" -ge 80 ]; then
          echo "‚úÖ Coverage $COVERAGE% meets minimum threshold (80%)"
        else
          echo "‚ùå Coverage $COVERAGE% below minimum threshold (80%)"
          exit 1
        fi
      else
        echo "‚ö†Ô∏è Cannot check coverage - lcov not available or no coverage data"
      fi

  test:quality:
    description: Run comprehensive quality checks (tests + coverage + analysis)
    run: |
      melos run format-check
      melos run analyze
      melos run test:coverage
      melos run test:coverage:check
      melos run deps:audit
      echo "‚úÖ All quality checks passed"

  coverage:merge:
    description: Merge coverage files
    run: |
      mkdir -p coverage
      melos exec --find . -name "lcov.info" -exec cat {} \; > coverage/lcov.info

  coverage:report:
    description: Generate coverage report
    run: |
      if command -v genhtml &> /dev/null; then
        genhtml coverage/lcov.info -o coverage/html
        echo "üìä Coverage report generated at coverage/html/index.html"
      else
        echo "‚ö†Ô∏è genhtml not found. Install lcov for HTML reports."
      fi

  # Build commands
  build:
    description: Build all packages
    run: melos exec --flutter build apk --debug
    packageFilters:
      dirExists: lib

  build:release:
    description: Build release versions
    run: melos exec --flutter build apk --release
    packageFilters:
      dirExists: lib

  build:ios:
    description: Build iOS version
    run: melos exec --flutter build ios --release
    packageFilters:
      dirExists: lib

  # Dependency management
  deps:
    description: Get dependencies for all packages
    run: melos exec --flutter pub get
    packageFilters:
      dirExists: pubspec.yaml

  deps:upgrade:
    description: Upgrade dependencies
    run: melos exec --flutter pub upgrade
    packageFilters:
      dirExists: pubspec.yaml

  deps:outdated:
    description: Check for outdated dependencies
    run: melos exec --flutter pub outdated
    packageFilters:
      dirExists: pubspec.yaml

  deps:tree:
    description: Show dependency tree
    run: melos exec --flutter pub deps --style=tree
    packageFilters:
      dirExists: pubspec.yaml

  deps:audit:
    description: Audit dependencies for security issues
    run: melos exec --flutter pub audit
    packageFilters:
      dirExists: pubspec.yaml

  # Code generation
  generate:
    description: Run code generation
    run: melos exec --dart run build_runner build --delete-conflicting-outputs
    packageFilters:
      dirExists: lib

  generate:watch:
    description: Run code generation in watch mode
    run: melos exec --dart run build_runner watch --delete-conflicting-outputs
    packageFilters:
      dirExists: lib

  # Package-specific commands
  auth:test:
    description: Run tests for auth package only
    run: flutter test --coverage
    packageFilters:
      name: auth

  timeline:test:
    description: Run tests for timeline package only
    run: flutter test --coverage
    packageFilters:
      name: timeline

  publishing:test:
    description: Run tests for publishing package only
    run: flutter test --coverage
    packageFilters:
      name: publishing

  # Validation commands
  validate:
    description: Run all validation checks with comprehensive testing
    run: |
      melos run format-check
      melos run analyze
      melos run test:quality
      echo "‚úÖ All validation checks passed"

  validate:pre-commit:
    description: Fast validation for pre-commit hooks
    run: |
      melos run format-check
      melos run analyze --no-congratulate
      melos run test:unit
      echo "‚úÖ Pre-commit validation passed"

  validate:ci:
    description: Full validation for CI/CD pipeline
    run: |
      melos run format-check
      melos run analyze
      melos run test:all
      melos run test:coverage:check
      melos run deps:audit
      echo "‚úÖ CI validation passed"

  validate:pr:
    description: Pull request validation with comprehensive checks
    run: |
      melos run validate:ci
      melos run test:performance
      echo "‚úÖ PR validation passed"

  # Release commands
  version:
    description: Show version information
    run: |
      echo "üì¶ Package versions:"
      melos exec --flutter pub deps --style=compact | grep -E "^[^-]"

  version:bump:
    description: Bump package versions
    run: melos exec --dart pub upgrade --major-versions
    packageFilters:
      dirExists: pubspec.yaml

  # Documentation
  docs:
    description: Generate documentation
    run: melos exec --dart doc
    packageFilters:
      dirExists: lib

  docs:serve:
    description: Serve documentation locally
    run: melos exec --dart doc --serve
    packageFilters:
      dirExists: lib

  # Development server
  dev:
    description: Start development server
    run: flutter run --debug
    packageFilters:
      scope: mobile_client

  dev:profile:
    description: Start profile development server
    run: flutter run --profile
    packageFilters:
      scope: mobile_client

  # Serverpod commands
  server:
    description: Start Serverpod backend
    run: dart run bin/main.dart
    packageFilters:
      scope: serverpod_backend

  server:migrate:
    description: Run database migrations
    run: dart run bin/main.dart --migrate
    packageFilters:
      scope: serverpod_backend

  server:generate:
    description: Generate Serverpod code
    run: dart run serverpod generate
    packageFilters:
      scope: serverpod_backend

  server:dev:
    description: Start development server with hot reload
    run: dart run bin/main.dart --apply-migrations
    packageFilters:
      scope: serverpod_backend

  # Full stack development
  dev:fullstack:
    description: Start both Flutter and Serverpod in development
    run: |
      melos run server:dev &
      melos run dev
    packageFilters:
      ignore: serverpod_backend

# IDE integration
ide:
  intellij:
    enabled: true
    format: true
  vscode:
    enabled: true
    format: true

# Hooks
hooks:
  postbootstrap: |
    echo "üöÄ Workspace bootstrapped successfully"
    echo "üìù Available commands: melos run --help"
    echo "üîç Common workflows:"
    echo "  melos run setup      # Initial setup"
    echo "  melos run validate    # Full validation"
    echo "  melos run test        # Run all tests"
    echo "  melos run build       # Build all packages"
  precommit: melos run validate:pre-commit