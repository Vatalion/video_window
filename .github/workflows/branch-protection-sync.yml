name: Branch Protection Sync

on:
  workflow_dispatch:
  schedule:
    # Run daily at 6 AM UTC to ensure branch protection stays in sync
    - cron: '0 6 * * *'
  push:
    branches:
      - develop
    paths:
      - '.github/workflows/**'

permissions:
  contents: read
  actions: read

jobs:
  sync-protection:
    name: Sync Branch Protection Rules
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Test Secret and Sync Branch Protection
        env:
          GH_TOKEN: ${{ secrets.BRANCH_PROTECTION_PAT }}
        shell: bash
        run: |
          set -euo pipefail

          echo "üîç Testing secret access and authentication..."

          # Check if secret is available
          if [[ -z "${GH_TOKEN:-}" ]]; then
            echo "‚ùå BRANCH_PROTECTION_PAT secret is not set or empty"
            echo "Please ensure the secret is properly configured in repository settings"
            exit 1
          fi

          echo "‚úÖ Secret is available (length: ${#GH_TOKEN})"

          # Test basic GitHub API access
          echo "üîê Testing GitHub API authentication..."
          if ! USER=$(gh api user --jq '.login' 2>/dev/null); then
            echo "‚ùå GitHub API authentication failed with BRANCH_PROTECTION_PAT"
            echo "Please verify the PAT has correct permissions"
            exit 1
          fi

          echo "‚úÖ Authenticated as: $USER"

          # Test repository access
          echo "üìÅ Testing repository access..."
          if ! REPO_INFO=$(gh api repos/"${GITHUB_REPOSITORY}" --jq '.full_name' 2>/dev/null); then
            echo "‚ùå Repository access failed"
            exit 1
          fi

          echo "‚úÖ Repository access confirmed: $REPO_INFO"

          echo "üõ°Ô∏è Testing branch protection access..."

          # Get repository components
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"

          # Test if we can access branch protection settings
          if ! CURRENT=$(gh api repos/"${OWNER}"/"${REPO}"/branches/develop/protection/required_status_checks --jq '.contexts' 2>/dev/null); then
            echo "‚ùå Cannot access branch protection settings"
            echo "Please verify the PAT has 'repo' scope and admin permissions"
            exit 1
          fi

          echo "‚úÖ Branch protection access confirmed"
          echo "Current contexts: $CURRENT"

          echo "üîß Proceeding with branch protection sync..."

          # Define required contexts from our workflows
          REQUIRED_CONTEXTS=(
            "QA Gate / qa-approved"      # From qa-gate.yml
            "build-and-test"            # From flutter-ci.yml
            "pr-lint"                   # From pr-lint.yml
            "lint"                      # From workflow-lint.yml
          )

          echo "Expected required contexts:"
          printf ' - %s\n' "${REQUIRED_CONTEXTS[@]}"

          # Build the new contexts JSON array
          NEW_CONTEXTS_JSON=$(printf '%s\n' "${REQUIRED_CONTEXTS[@]}" | jq -R . | jq -s .)
          echo "New contexts JSON: $NEW_CONTEXTS_JSON"

          # Compare and update if different
          if [[ "$CURRENT" != "$NEW_CONTEXTS_JSON" ]]; then
            echo "üîÑ Updating branch protection contexts..."
            echo '{"strict":true,"contexts":'$NEW_CONTEXTS_JSON'}' | \
              gh api repos/"${OWNER}"/"${REPO}"/branches/develop/protection/required_status_checks \
              -X PATCH --input -
            echo "‚úÖ Branch protection contexts updated successfully"
          else
            echo "‚úÖ Branch protection contexts are already in sync"
          fi

          # Final validation
          echo "üîç Final validation..."
          UPDATED=$(gh api repos/"${OWNER}"/"${REPO}"/branches/develop/protection/required_status_checks --jq '.contexts')
          echo "Final contexts: $UPDATED"

          echo "üéâ Branch protection sync completed successfully!"
