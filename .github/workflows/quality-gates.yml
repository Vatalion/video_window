name: Quality Gates and Testing

on:
  push:
    branches: [develop, main, "release/*"]
  pull_request:
    branches: [develop, main]
  schedule:
    # Run comprehensive quality checks daily at 2 AM UTC
    - cron: "0 2 * * *"

env:
  FLUTTER_VERSION: "3.35.0"
  JAVA_VERSION: "17"

jobs:
  # Pre-commit quality checks
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install Melos
        run: dart pub global activate melos

      - name: Install dependencies
        run: melos run deps

      - name: Generate code
        run: melos run generate

      - name: Check code formatting
        run: melos run format-check

      - name: Run static analysis
        run: melos run analyze

      - name: Run unit tests
        run: melos run test:unit

      - name: Check test coverage
        run: melos run test:coverage:check

      - name: Dependency audit
        run: melos run deps:audit

      - name: Validate documentation
        run: ./scripts/validate-docs.sh

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Widget and integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install Melos
        run: dart pub global activate melos

      - name: Install dependencies
        run: melos run deps

      - name: Generate code
        run: melos run generate

      - name: Run widget tests
        run: melos run test:widget

      - name: Run integration tests
        run: melos run test:integration

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test/reports/

  # Golden tests (visual regression)
  golden-tests:
    name: Golden Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality-checks
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install Melos
        run: dart pub global activate melos

      - name: Install dependencies
        run: melos run deps

      - name: Generate code
        run: melos run generate

      - name: Run golden tests
        run: melos run test:golden

      - name: Upload golden test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: golden-test-failures
          path: test/goldens/failures/

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: quality-checks
    if: github.event_name == 'pull_request' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install Melos
        run: dart pub global activate melos

      - name: Install dependencies
        run: melos run deps

      - name: Generate code
        run: melos run generate

      - name: Run performance tests
        run: melos run test:performance

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: test/performance/reports/

      - name: Comment PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // Read performance results and comment on PR
            const fs = require('fs');
            const path = './test/performance/reports/summary.json';

            if (fs.existsSync(path)) {
              const results = JSON.parse(fs.readFileSync(path, 'utf8'));
              const comment = `
              ## üìä Performance Test Results

              ${results.passed ? '‚úÖ' : '‚ùå'} Performance tests ${results.passed ? 'passed' : 'failed'}

              | Metric | Result | Threshold | Status |
              |--------|--------|-----------|--------|
              | App Startup | ${results.appStartup}ms | 3000ms | ${results.appStartup <= 3000 ? '‚úÖ' : '‚ùå'} |
              | Screen Load | ${results.screenLoad}ms | 500ms | ${results.screenLoad <= 500 ? '‚úÖ' : '‚ùå'} |
              | API Response | ${results.apiResponse}ms | 1000ms | ${results.apiResponse <= 1000 ? '‚úÖ' : '‚ùå'} |
              | Memory Usage | ${results.memoryUsage}MB | 200MB | ${results.memoryUsage <= 200 ? '‚úÖ' : '‚ùå'} |

              ${results.passed ? 'Performance is within acceptable limits.' : '‚ö†Ô∏è Performance regression detected!'}
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install Melos
        run: dart pub global activate melos

      - name: Install dependencies
        run: melos run deps

      - name: Run security audit
        run: melos run deps:audit

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Build verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [quality-checks, integration-tests]
    strategy:
      matrix:
        platform: [android, web]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install Melos
        run: dart pub global activate melos

      - name: Install dependencies
        run: melos run deps

      - name: Generate code
        run: melos run generate

      - name: Build for Android
        if: matrix.platform == 'android'
        run: melos run build:apk

      - name: Build for Web
        if: matrix.platform == 'web'
        run: melos exec --flutter build web --no-web-resources-cdn

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-${{ matrix.platform }}
          path: |
            build/app/outputs/flutter-apk/
            build/web/

  # Cross-platform tests (if resources available)
  cross-platform-tests:
    name: Cross-Platform Tests
    runs-on: macos-latest
    timeout-minutes: 45
    needs: build-verification
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'cross-platform-test')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install Melos
        run: dart pub global activate melos

      - name: Install dependencies
        run: melos run deps

      - name: Generate code
        run: melos run generate

      - name: Setup iOS Simulator
        run: |
          xcrun simctl create "iPhone 15" "iPhone 15"
          xcrun simctl boot "iPhone 15"

      - name: Run iOS tests
        run: melos exec --flutter test --device-id="iPhone 15"

      - name: Build for iOS
        run: melos run build:ios

      - name: Upload iOS build artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-ios
          path: build/ios/

  # Quality gate status
  quality-gate-status:
    name: Quality Gate Status
    runs-on: ubuntu-latest
    needs:
      [quality-checks, integration-tests, security-scan, build-verification]
    if: always()

    steps:
      - name: Check all job statuses
        run: |
          QUALITY_CHECKS="${{ needs.quality-checks.result }}"
          INTEGRATION_TESTS="${{ needs.integration-tests.result }}"
          SECURITY_SCAN="${{ needs.security-scan.result }}"
          BUILD_VERIFICATION="${{ needs.build-verification.result }}"

          echo "Quality Checks: $QUALITY_CHECKS"
          echo "Integration Tests: $INTEGRATION_TESTS"
          echo "Security Scan: $SECURITY_SCAN"
          echo "Build Verification: $BUILD_VERIFICATION"

          if [[ "$QUALITY_CHECKS" == "success" &&
                "$INTEGRATION_TESTS" == "success" &&
                "$SECURITY_SCAN" != "failure" &&
                "$BUILD_VERIFICATION" == "success" ]]; then
            echo "‚úÖ All quality gates passed"
            exit 0
          else
            echo "‚ùå Quality gates failed"
            exit 1
          fi

      - name: Update PR status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const QUALITY_CHECKS = "${{ needs.quality-checks.result }}";
            const INTEGRATION_TESTS = "${{ needs.integration-tests.result }}";
            const SECURITY_SCAN = "${{ needs.security-scan.result }}";
            const BUILD_VERIFICATION = "${{ needs.build-verification.result }}";

            let state = 'pending';
            let description = 'Quality checks in progress...';

            if (QUALITY_CHECKS === 'success' &&
                INTEGRATION_TESTS === 'success' &&
                SECURITY_SCAN !== 'failure' &&
                BUILD_VERIFICATION === 'success') {
              state = 'success';
              description = 'All quality gates passed ‚úÖ';
            } else if (QUALITY_CHECKS === 'failure' ||
                       INTEGRATION_TESTS === 'failure' ||
                       SECURITY_SCAN === 'failure' ||
                       BUILD_VERIFICATION === 'failure') {
              state = 'failure';
              description = 'Quality gates failed ‚ùå';
            }

            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'quality-gates'
            });

  # Notify team on failures
  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [quality-gate-status]
    if: failure() && github.event_name == 'push'

    steps:
      - name: Notify team of quality gate failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            üö® Quality Gates Failed

            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}

            Please review the failed checks and address the issues.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
