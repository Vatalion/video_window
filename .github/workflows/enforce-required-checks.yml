name: Enforce Required Checks (Workflow Lint)

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/workflow-lint.yml"
      - ".github/workflows/enforce-required-checks.yml"
      - ".github/workflows/auto-pr-from-qa.yml"
  schedule:
<<<<<<< HEAD
<<<<<<< HEAD
    - cron: "0 6 * * 1"  # Weekly on Mondays 06:00 UTC
=======
    - cron: "0 6 * * 1" # Weekly on Mondays 06:00 UTC
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags
=======
    - cron: "0 6 * * 1"  # Weekly on Mondays 06:00 UTC
>>>>>>> origin/story/0.9.3-auto-merge

permissions:
  contents: read

jobs:
  enforce:
    runs-on: ubuntu-latest
    env:
      OWNER: ${{ github.repository_owner }}
      REPO: ${{ github.event.repository.name || github.repository }}
<<<<<<< HEAD
<<<<<<< HEAD
      REQUIRED_CONTEXTS_MAIN: '["Main Release Gate / main-release-gate","Flutter CI / build-and-test","PR Lint / pr-lint","Workflow Lint / lint","QA Gate / qa-approved"]'
      REQUIRED_CONTEXTS_DEVELOP: '["Flutter CI / build-and-test","PR Lint / pr-lint","Workflow Lint / lint","QA Gate / qa-approved"]'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Common setup
        uses: ./.github/actions/common-setup
=======
      REQUIRED_CONTEXTS: '["Workflow Lint / lint","Auto PR and Auto-merge on QA Done / Workflow Lint"]'
=======
      REQUIRED_CONTEXTS: '["Workflow Lint / lint","Flutter CI / build-and-test","PR Lint / pr-lint","Auto PR and Auto-merge on QA Done / Workflow Lint"]'
>>>>>>> origin/story/0.9.3-auto-merge
    steps:
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags
      - name: Show context
        shell: bash
        run: |
          set -euo pipefail
<<<<<<< HEAD
          echo "Repo: ${GITHUB_REPOSITORY}"
          echo "Owner: ${OWNER}"
          echo "Required contexts (main): ${REQUIRED_CONTEXTS_MAIN}"
          echo "Required contexts (develop): ${REQUIRED_CONTEXTS_DEVELOP}"

      - name: Install jq
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq
=======
          echo "Repo: $GITHUB_REPOSITORY"
          echo "Owner: $OWNER"
          echo "Required contexts: $REQUIRED_CONTEXTS"
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags

      - name: Verify admin token presence
        id: token
        shell: bash
        run: |
          set -euo pipefail
          if [[ -z "${{ secrets.REPO_ADMIN_TOKEN || '' }}" ]]; then
            echo "has_token=false" >> "$GITHUB_OUTPUT"
<<<<<<< HEAD
<<<<<<< HEAD
            echo "No REPO_ADMIN_TOKEN secret present. Will skip enforcement and only emit guidance."
=======
            echo "No REPO_ADMIN_TOKEN secret present. Will skip enforcement and only emit guidance." 
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags
=======
            echo "No REPO_ADMIN_TOKEN secret present. Will skip enforcement and only emit guidance."
>>>>>>> origin/story/0.9.3-auto-merge
          else
            echo "has_token=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Emit guidance when token missing
        if: steps.token.outputs.has_token == 'false'
        shell: bash
        run: |
          set -euo pipefail
          echo "Required check enforcement is automated but needs a repository admin token once per repo."
          echo
          echo "Action (one-time by repo admin):"
          echo "- Create a fine-grained PAT with Repository administration: Read and write"
          echo "- Add it as repo secret: REPO_ADMIN_TOKEN"
          echo "- Re-run this workflow (workflow_dispatch)"
          echo
          echo "This will configure branch protection to require these status checks on main/develop:"
<<<<<<< HEAD
          echo "- Main Release Gate / main-release-gate (main only)"
          echo "- Workflow Lint / lint"
          echo "- PR Lint / pr-lint"
          echo "- Flutter CI / build-and-test"
          echo "- QA Gate / qa-approved"
=======
          echo "- Workflow Lint / lint"
          echo "- Auto PR and Auto-merge on QA Done / Workflow Lint"
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags

      - name: Enforce required checks for branches
        if: steps.token.outputs.has_token == 'true'
        env:
          API: https://api.github.com
          TOKEN: ${{ secrets.REPO_ADMIN_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail

          # Resolve repo name if github.event.repository.name is unavailable (e.g., for workflow_run)
          if [[ "$REPO" == */* ]]; then
            REPO_NAME="${REPO#*/}"
          else
            REPO_NAME="$REPO"
          fi
<<<<<<< HEAD
          enforce_for_branch() {
            local BRANCH="$1"
            local REQUIRED_CONTEXTS_JSON="$2"
            echo ""
            echo ">>> Enforcing required checks on branch: ${BRANCH}"
=======

          # Required contexts JSON array from env (must be valid JSON)
          REQUIRED_CONTEXTS_JSON="${REQUIRED_CONTEXTS}"

          enforce_for_branch() {
            local BRANCH="$1"
            echo "\n>>> Enforcing required checks on branch: $BRANCH"
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags

            # Fetch existing protection (if any)
            PROTECTION=$(curl -sS -H "authorization: Bearer ${TOKEN}" -H "accept: application/vnd.github+json" \
              "$API/repos/$OWNER/$REPO_NAME/branches/$BRANCH/protection" || true)

            # Extract current contexts if present; default to empty array
            CURRENT_CONTEXTS=$(printf '%s' "$PROTECTION" | jq -c '.required_status_checks.contexts // []')

<<<<<<< HEAD
            # Replace existing contexts with the required set (prune legacy names)
            UPDATED_CONTEXTS=$(jq -nc --argjson req "$REQUIRED_CONTEXTS_JSON" '$req')
=======
            # Merge contexts with all required contexts, unique
            UPDATED_CONTEXTS=$(jq -nc --argjson ctxs "$CURRENT_CONTEXTS" --argjson req "$REQUIRED_CONTEXTS_JSON" '
              ($ctxs + $req) | unique')
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags

            # Build payload: preserve strict=true, set contexts; keep other settings permissive
            PAYLOAD=$(jq -nc --argjson contexts "$UPDATED_CONTEXTS" '{
              required_status_checks: { strict: true, contexts: $contexts },
              enforce_admins: true,
              required_pull_request_reviews: null,
              restrictions: null
            }')

            # PUT protection
            RESP=$(curl -sS -X PUT -H "authorization: Bearer ${TOKEN}" -H "accept: application/vnd.github+json" \
              -H "content-type: application/json" -d "$PAYLOAD" \
              "$API/repos/$OWNER/$REPO_NAME/branches/$BRANCH/protection")

            echo "$RESP" | jq '.' || true

            # Verify all required contexts are present
            MISSING=$(printf '%s' "$RESP" | jq --argjson req "$REQUIRED_CONTEXTS_JSON" -e '
              (.required_status_checks.contexts // []) as $have | [ $req[] | select( . as $r | ( $have | index($r) ) == null ) ]') || true
            if [[ "$MISSING" != "[]" ]]; then
              echo "Failed to verify required check configuration for $BRANCH. Missing contexts: $MISSING" >&2
              exit 1
            fi
            echo "âœ“ Required contexts enforced on $BRANCH"
          }

<<<<<<< HEAD
          enforce_for_branch main "$REQUIRED_CONTEXTS_MAIN" || true
          enforce_for_branch develop "$REQUIRED_CONTEXTS_DEVELOP" || true
=======
          enforce_for_branch main || true
          enforce_for_branch develop || true
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags

      - name: Summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          echo "Enforcement job finished. See logs above for branch results."
<<<<<<< HEAD

<<<<<<< HEAD
  report-pr-required-checks:
    name: Report PR required checks
    needs: [enforce]
    if: vars.COPILOT_REVIEW_ENABLED != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: read
    env:
      REQUIRED_CONTEXTS: '["Flutter CI / build-and-test","PR Lint / pr-lint","Workflow Lint / lint","QA Gate / qa-approved"]'
    steps:
      - name: Install jq
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq
      - name: List open PRs to develop (story/* only)
        id: list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          API="https://api.github.com"
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          PAGE=1
          PRS="[]"
          while :; do
            RESP=$(curl -sS -H "authorization: Bearer ${GH_TOKEN}" -H 'accept: application/vnd.github+json' \
              "${API}/repos/${OWNER}/${REPO}/pulls?state=open&base=develop&per_page=100&page=${PAGE}")
            COUNT=$(echo "$RESP" | jq 'length')
            PRS=$(jq -nc --argjson acc "$PRS" --argjson resp "$RESP" '$acc + $resp')
            if [ "$COUNT" -lt 100 ]; then break; fi
            PAGE=$((PAGE+1))
          done
          STORY=$(echo "$PRS" | jq '[ .[] | select(.head.ref | startswith("story/")) | {number: .number, sha: .head.sha} ]')
          echo "result=$(echo "$STORY" | jq -c '.')" >> "$GITHUB_OUTPUT"
      - name: Evaluate checks per PR and comment/label
        if: ${{ steps.list.outputs.result != '' }}
        env:
          PRS_JSON: ${{ steps.list.outputs.result }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          API="https://api.github.com"
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          REQUIRED_CONTEXTS_JSON='${REQUIRED_CONTEXTS}'
          echo "$PRS_JSON" | jq -r '.[] | @base64' | while read -r row; do
            _jq() { echo "$row" | base64 --decode | jq -r "$1"; }
            PR=$(_jq '.number'); SHA=$(_jq '.sha')
            echo "::group::PR #${PR} checks"
            RESP=$(curl -sS -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" \
              "${API}/repos/${OWNER}/${REPO}/commits/${SHA}/check-runs")
            MISSING=$(jq -nc --argjson req "$REQUIRED_CONTEXTS_JSON" --argjson have "$(echo "$RESP" | jq '[.check_runs[].name]')" \
              '$req - $have')
            FAILED=$(echo "$RESP" | jq -r '.check_runs[] | select(.conclusion != "success") | .name')
            COMMENT=""
            if [[ "$MISSING" != "[]" ]]; then
              COMMENT+=$'Required checks missing on this commit:\n'
              COMMENT+=$(echo "$MISSING" | jq -r '.[] | "- " + .')$'\n'
            fi
            if [[ -n "$FAILED" ]]; then
              COMMENT+=$'Non-green checks:\n'
              COMMENT+=$(printf '%s\n' "$FAILED" | sed 's/^/- /')$'\n'
            fi
            if [[ -n "$COMMENT" ]]; then
              # Ensure labels exist
              curl -sS -X POST -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" -H "content-type: application/json" \
                -d '{"name":"checks:red","color":"b60205","description":"Required checks failing/missing"}' \
                "${API}/repos/${OWNER}/${REPO}/labels" >/dev/null || true
              curl -sS -X POST -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" -H "content-type: application/json" \
                -d '{"labels":["checks:red"]}' "${API}/repos/${OWNER}/${REPO}/issues/${PR}/labels" >/dev/null || true
              BODY=$'Required checks status summary (enforced):\n\n'"$COMMENT"
              curl -sS -X POST -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" -H "content-type: application/json" \
                -d "$(jq -cn --arg body "$BODY" '{body:$body}')" \
                "${API}/repos/${OWNER}/${REPO}/issues/${PR}/comments" >/dev/null || true
            else
              # Remove red label if present
              curl -sS -X DELETE -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" \
                "${API}/repos/${OWNER}/${REPO}/issues/${PR}/labels/checks:red" >/dev/null || true
            fi
            echo "::endgroup::"
          done
      - name: Emit summary
        if: always()
        run: |
          set -euo pipefail
          echo "### Required checks report" >> $GITHUB_STEP_SUMMARY
          echo "- Processed PRs: $(echo '${{ steps.list.outputs.result || '[]' }}' | jq 'length')" >> $GITHUB_STEP_SUMMARY
=======

>>>>>>> origin/story/0.9.1-workflow-lint-and-flags
=======
>>>>>>> origin/story/0.9.3-auto-merge
