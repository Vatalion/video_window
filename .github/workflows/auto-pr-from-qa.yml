name: Auto PR and Auto-merge on QA Done

on:
  push:
    branches:
      - 'story/**'
<<<<<<< HEAD
  workflow_dispatch:
    inputs:
      branch:
        description: "Target branch to operate on (defaults to ref name)"
        required: false
        type: string
=======
      - 'feature/**'
      - 'fix/**'
      - 'chore/**'
      - 'patch/**'
  workflow_dispatch:
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags

permissions:
  contents: write
  pull-requests: write
<<<<<<< HEAD
<<<<<<< HEAD
  issues: write
  actions: read
  checks: read
  statuses: read
=======
  issues: write
>>>>>>> origin/story/0.9.4-reliability-hardening

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
=======

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
<<<<<<< HEAD
  cancel-in-progress: false
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags
=======
  cancel-in-progress: true
>>>>>>> origin/story/0.9.3-auto-merge

jobs:
  workflow-lint:
    name: Workflow Lint
    runs-on: ubuntu-latest
<<<<<<< HEAD
    timeout-minutes: 10
=======
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
<<<<<<< HEAD
<<<<<<< HEAD
      - name: Common setup
        uses: ./.github/actions/common-setup
=======
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags
=======
>>>>>>> origin/story/0.9.3-auto-merge
      - name: Install actionlint (pinned)
        run: |
          set -euo pipefail
          VERSION="1.7.1"
          mkdir -p "$HOME/bin"
<<<<<<< HEAD
<<<<<<< HEAD
          curl -sSfL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | bash -s -- "${VERSION}" "$HOME/bin"
          echo "$HOME/bin" >> "$GITHUB_PATH"
      - name: Run actionlint (YAML only)
        run: |
          set -euo pipefail
          actionlint -shellcheck=
=======
          curl -sSfL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | bash -s -- "v${VERSION}" "$HOME/bin"
=======
          curl -sSfL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | bash -s -- "${VERSION}" "$HOME/bin"
>>>>>>> origin/story/0.9.3-auto-merge
          echo "$HOME/bin" >> "$GITHUB_PATH"
      - name: Run actionlint (YAML only)
        run: |
          set -euo pipefail
<<<<<<< HEAD
          actionlint -no-network -shellcheck=
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags
=======
          actionlint -shellcheck=
>>>>>>> origin/story/0.9.3-auto-merge
      - name: Install yamllint (pinned)
        run: |
          set -euo pipefail
          python3 -m pip install --user yamllint==1.35.1
      - name: Run yamllint on workflows
        run: |
          set -euo pipefail
          ~/.local/bin/yamllint --strict .github/workflows

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
  preflight-parse:
    name: Preflight Parser
    needs: [workflow-lint]
=======
  open-pr-and-automerge:
    needs: [workflow-lint]
    if: ${{ vars.AUTO_PR_ENABLED != 'false' }}
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags
=======
  preflight-parse:
    name: Preflight Parser
    needs: [workflow-lint]
>>>>>>> origin/story/0.9.4-reliability-hardening
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> origin/story/0.9.4-reliability-hardening
      - name: Run preflight parser
        shell: bash
        run: |
          set -euo pipefail
          bash scripts/preflight-parse.sh "${{ inputs.branch || github.ref_name }}"

  open-pr-and-automerge-reusable:
    needs: [workflow-lint, preflight-parse]
    if: ${{ vars.AUTO_PR_ENABLED != 'false' }}
    permissions:
      contents: write
      pull-requests: write
      issues: write
<<<<<<< HEAD
      actions: read
      checks: read
      statuses: read
=======
>>>>>>> origin/story/0.9.4-reliability-hardening
    uses: ./.github/workflows/reusable-auto-pr.yml
    with:
      branch: ${{ inputs.branch || github.ref_name }}
      enable_auto_merge: ${{ vars.AUTO_MERGE_ENABLED != 'false' }}
      # Disable auto-approval by default; only enable when explicitly set to 'true'
      auto_approve: ${{ vars.AUTO_APPROVE_ENABLED == 'true' }}
      dry_run: false
    secrets: inherit
  simulate-open-pr-locally:
    needs: [workflow-lint, preflight-parse]
    if: ${{ vars.AUTO_PR_ENABLED != 'false' && github.repository == 'local/crypto_market' }}
    runs-on: ubuntu-latest
    steps:
      - name: Simulate reusable auto-PR locally
        run: |
          set -euo pipefail
          echo "::group::Local simulation"
          echo "Simulating PR create/reuse and labeling (dry-run)"
          echo "Branch: ${{ inputs.branch || github.ref_name }}"
          echo "Story gating respected via preflight step"
          echo "::endgroup::"
  note-auto-pr-disabled:
    needs: [workflow-lint, preflight-parse]
    if: ${{ vars.AUTO_PR_ENABLED == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Flag note: AUTO_PR_ENABLED=false"
=======

      - name: Show environment
        shell: bash
        run: |
          set -euo pipefail
          echo "Repo: $GITHUB_REPOSITORY"
          echo "Branch: $GITHUB_REF_NAME"

      - name: Derive branch meta and verify QA Done (if story branch)
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="${GITHUB_REF_NAME}"
          echo "branch_name=$BRANCH" >> "$GITHUB_OUTPUT"
          if [[ "$BRANCH" =~ ^story/([0-9]+(\.[0-9]+)*)- ]]; then
            STORY_ID="${BASH_REMATCH[1]}"
            STORY_FILE=$(ls docs/stories/${STORY_ID}.*.md 2>/dev/null | head -n1 || true)
            if [[ -z "${STORY_FILE:-}" ]]; then
              echo "qa_done=false" >> "$GITHUB_OUTPUT"
              echo "reason=story-file-missing" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            STATUS_LINE=$(grep -iE '^Status:' "$STORY_FILE" || true)
            if echo "$STATUS_LINE" | grep -qi 'Done'; then
              echo "qa_done=true" >> "$GITHUB_OUTPUT"
              echo "story_id=$STORY_ID" >> "$GITHUB_OUTPUT"
              echo "story_file=$STORY_FILE" >> "$GITHUB_OUTPUT"
            else
              echo "qa_done=false" >> "$GITHUB_OUTPUT"
              echo "reason=status-not-done" >> "$GITHUB_OUTPUT"
            fi
          elif [[ "$BRANCH" =~ ^(feature|fix|chore|patch)/ ]]; then
            # Non-story branches: proceed unconditionally; CI gates will enforce quality
            echo "qa_done=true" >> "$GITHUB_OUTPUT"
            echo "story_id=" >> "$GITHUB_OUTPUT"
            echo "story_file=" >> "$GITHUB_OUTPUT"
          else
            echo "qa_done=false" >> "$GITHUB_OUTPUT"
            echo "reason=unsupported-branch" >> "$GITHUB_OUTPUT"
          fi

      - name: Ensure PR exists from story branch to develop (REST API)
        id: create_pr
        if: steps.meta.outputs.qa_done == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="${GITHUB_REF_NAME}"
          STORY_ID="${{ steps.meta.outputs.story_id }}"
          STORY_FILE="${{ steps.meta.outputs.story_file }}"
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          API="https://api.github.com"

          # Check for existing open PR from this branch
          EXISTING=$(curl -sS -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" \
            "${API}/repos/${OWNER}/${REPO}/pulls?head=${OWNER}:${BRANCH}&state=open" | jq '.[0].number // empty')

          if [[ -n "${EXISTING}" ]]; then
            echo "PR already exists: #${EXISTING}"
            echo "pr_number=${EXISTING}" >> "$GITHUB_OUTPUT"
          else
            if [[ -n "$STORY_ID" ]]; then
              TITLE="Story ${STORY_ID}: QA Done â€” auto PR to develop"
              BODY=$'This PR was auto-created after QA marked Status: Done in the story file.\n\nMerge strategy: squash; delete source branch on merge.'
              BODY="$BODY\n\nstory ${STORY_ID}\n\nchanged: \`${STORY_FILE}\`"
            else
              TITLE="Auto PR to develop for $BRANCH"
              BODY=$'This PR was auto-created after changes were pushed to this branch.\n\nMerge strategy: squash; delete source branch on merge.'
            fi

            PAYLOAD=$(jq -cn --arg title "$TITLE" --arg head "$BRANCH" --arg base "develop" --arg body "$BODY" '{title:$title, head:$head, base:$base, body:$body}')
            RESP=$(curl -sS -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" -d "$PAYLOAD" \
              "${API}/repos/${OWNER}/${REPO}/pulls")
            PR_NUMBER=$(printf '%s' "$RESP" | jq '.number')
            if [[ -z "${PR_NUMBER}" || "${PR_NUMBER}" == "null" ]]; then
              echo "Failed to create PR: $RESP" >&2
              exit 1
            fi
            echo "Created PR: #${PR_NUMBER}"
            echo "pr_number=${PR_NUMBER}" >> "$GITHUB_OUTPUT"
          fi

      - name: Label PR for visibility (automerge-candidate)
        if: steps.meta.outputs.qa_done == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          API="https://api.github.com"
          # Try to read from previous step; if missing (e.g., reused path), query
          PR_NUMBER="${{ steps.create_pr.outputs.pr_number || '' }}"
          if [[ -z "$PR_NUMBER" ]]; then
            BRANCH="${GITHUB_REF_NAME}"
            PR_NUMBER=$(curl -sS -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" \
              "${API}/repos/${OWNER}/${REPO}/pulls?head=${OWNER}:${BRANCH}&state=open" | jq '.[0].number // empty')
          fi
          if [[ -z "$PR_NUMBER" ]]; then
            echo "No PR found to label. Skipping."
            exit 0
          fi
          PAYLOAD='{"labels":["automerge-candidate"]}'
          curl -sS -X POST -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" -H "content-type: application/json" \
            -d "$PAYLOAD" "${API}/repos/${OWNER}/${REPO}/issues/${PR_NUMBER}/labels" | jq '.' || true

      - name: Label PR for auto-merge (automerge-ok)
        if: steps.meta.outputs.qa_done == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          API="https://api.github.com"
          PR_NUMBER="${{ steps.create_pr.outputs.pr_number || '' }}"
          if [[ -z "$PR_NUMBER" ]]; then
            BRANCH="${GITHUB_REF_NAME}"
            PR_NUMBER=$(curl -sS -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" \
              "${API}/repos/${OWNER}/${REPO}/pulls?head=${OWNER}:${BRANCH}&state=open" | jq '.[0].number // empty')
          fi
          if [[ -z "$PR_NUMBER" ]]; then
            echo "No PR found to label. Skipping."
            exit 0
          fi
          PAYLOAD='{"labels":["automerge-ok"]}'
          curl -sS -X POST -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" -H "content-type: application/json" \
            -d "$PAYLOAD" "${API}/repos/${OWNER}/${REPO}/issues/${PR_NUMBER}/labels" | jq '.' || true

      - name: "Enable auto-merge (squash)"
        if: steps.meta.outputs.qa_done == 'true' && vars.AUTO_MERGE_ENABLED != 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          API="https://api.github.com"
          # Figure out PR number from previous step or by querying
          PR_NUMBER="${{ steps.create_pr.outputs.pr_number || '' }}"
          if [[ -z "$PR_NUMBER" ]]; then
            BRANCH="${GITHUB_REF_NAME}"
            PR_NUMBER=$(curl -sS -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" \
              "${API}/repos/${OWNER}/${REPO}/pulls?head=${OWNER}:${BRANCH}&state=open" | jq '.[0].number // empty')
          fi
          if [[ -z "$PR_NUMBER" ]]; then
            echo "No PR found to enable auto-merge on. Exiting gracefully."
            exit 0
          fi

          # Get node_id for GraphQL auto-merge
          NODE_ID=$(curl -sS -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" \
            "${API}/repos/${OWNER}/${REPO}/pulls/${PR_NUMBER}" | jq -r '.node_id')
          if [[ -z "$NODE_ID" || "$NODE_ID" == "null" ]]; then
            echo "Failed to get PR node_id"
            exit 0
          fi

          GQL=$'mutation EnableAutoMerge($pr: ID!) {\n  enablePullRequestAutoMerge(input: { pullRequestId: $pr, mergeMethod: SQUASH }) {\n    clientMutationId\n  }\n}'
          VARIABLES=$(jq -cn --arg pr "$NODE_ID" '{pr:$pr}')
          RESP=$(curl -sS -H "authorization: Bearer ${GH_TOKEN}" -H "content-type: application/json" \
            -d "$(jq -cn --arg query "$GQL" --argjson variables "$VARIABLES" '{query:$query, variables:$variables}')" \
            https://api.github.com/graphql)
          echo "$RESP" | jq '.' || true
          if echo "$RESP" | grep -q 'errors'; then
            echo "Auto-merge enable failed (possibly disabled on repo). Leaving PR open."
            exit 0
          fi

      - name: "Flags note: AUTO_MERGE_ENABLED=false"
        if: ${{ vars.AUTO_MERGE_ENABLED == 'false' }}
        shell: bash
        run: |
          set -euo pipefail
          echo "AUTO_MERGE_ENABLED=false: Auto-merge steps are currently disabled by repo variable."

      - name: Auto-approve PR (bot review)
        if: steps.meta.outputs.qa_done == 'true' && vars.AUTO_APPROVE_ENABLED != 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          API="https://api.github.com"
          PR_NUMBER="${{ steps.create_pr.outputs.pr_number || '' }}"
          if [[ -z "$PR_NUMBER" ]]; then
            BRANCH="${GITHUB_REF_NAME}"
            PR_NUMBER=$(curl -sS -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" \
              "${API}/repos/${OWNER}/${REPO}/pulls?head=${OWNER}:${BRANCH}&state=open" | jq '.[0].number // empty')
          fi
          if [[ -z "$PR_NUMBER" ]]; then
            echo "No PR found to approve. Skipping."
            exit 0
          fi
          PAYLOAD='{"event":"APPROVE","body":"Auto-approval by CI for merge-on-green fallback."}'
          curl -sS -X POST -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" -H "content-type: application/json" \
            -d "$PAYLOAD" "${API}/repos/${OWNER}/${REPO}/pulls/${PR_NUMBER}/reviews" | jq '.' || true


=======
  open-pr-and-automerge-reusable:
    needs: [workflow-lint]
    if: ${{ vars.AUTO_PR_ENABLED != 'false' }}
    uses: ./.github/workflows/reusable-auto-pr.yml
    with:
      branch: ${{ github.ref_name }}
      enable_auto_merge: ${{ vars.AUTO_MERGE_ENABLED != 'false' }}
      auto_approve: ${{ vars.AUTO_APPROVE_ENABLED != 'false' }}
      dry_run: false
    secrets: inherit
>>>>>>> origin/story/0.9.3-auto-merge
  note-auto-pr-disabled:
    needs: [workflow-lint, preflight-parse]
    if: ${{ vars.AUTO_PR_ENABLED == 'false' }}
    runs-on: ubuntu-latest
    steps:
<<<<<<< HEAD
      - name: Flag note: AUTO_PR_ENABLED=false
>>>>>>> origin/story/0.9.1-workflow-lint-and-flags
=======
      - name: "Flag note: AUTO_PR_ENABLED=false"
>>>>>>> origin/story/0.9.3-auto-merge
        shell: bash
        run: |
          set -euo pipefail
          echo "AUTO_PR_ENABLED=false: Open PR and auto-merge steps are disabled by repo variable. No PR will be created or modified by this workflow."
<<<<<<< HEAD
<<<<<<< HEAD
=======


>>>>>>> origin/story/0.9.1-workflow-lint-and-flags
=======
>>>>>>> origin/story/0.9.3-auto-merge
